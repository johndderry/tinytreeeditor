root = { name: "ï»¿Your Score is a Tree Structure", meaning: "This tree will be traversed for musical and iterative information, and the result will be the interpretation as a midi file.", next: { name: "Expressing Notes", meaning: "Notes are expressed using base 7 because there are seven notes in the scale.", child: { name: "Notes are 'a' thru 'g'", meaning: "Which represent the notes of a scale. The actual key and mode of the scale are variable.", child: { name: "Each note can have it's own timing", meaning: "Timing is entered as a fraction of a beat. The numerator is the child of the note node, the optional denominator is the child of the numerator.", next: { name: "Pitch and Mode are set with built in commands", meaning: "KEY command set the actual key of the scale, MODE command will select from traditional musical modes.", } }, next: { name: "Octaves are 'a' thru 'g' as well", meaning: "Octaves go before the note. 'aa' represents the tonic at the first octave.", } }, next: { name: "Variables", meaning: "Variables can store notes, numbers or parts of a tree. Without any child nodes the Variable is read, with child nodes it is set.", child: { name: "Created automatically", meaning: "Variables are created automatically whenever one is referenced, They are initialized to zero, which also represents note 'a'.", next: { name: "Comprised of Any Text", meaning: "Any text entered as a node which is not a note from 'a' to 'gg', not a built in, not a opeator or control structure is interpreted as a variable.", next: { name: "Initializing", meaning: "Variables are initialized or set whenever a child node exists. The variable is set the value of the child node, whether it is a note, number, or a control structure with child nodes.", next: { name: "Using", meaning: "Use the variable without any child nodes to read the variable, It can be used whereever the contents would appear, as a note, number or control structure. ", } } } }, next: { name: "Operators", meaning: "Operators operate on child nodes. The result will be the same type as the child nodes. Two or more operands are allowed.", child: { name: "+", meaning: "The addition operators sums up the value of all child operands. Notes and numerics are supported as well as variables.", next: { name: "-", meaning: "The subtraction operator subtracts any child operands after the first operand, from the first operand.", } }, next: { name: "Control Structures", child: { name: "@ - Repeat N Times", meaning: "Repeats the set of child nodes, except the first, sequentially N number of times. N is the first child and is entered as a number.", next: { name: "& - Do in Parallel", meaning: "Do the set of child nodes in parallel. Each node begins at the same musical time, after this command the musical time is advanced past the longest sequence.", } }, next: { name: "Built In Commands", meaning: "These commands aspects of the music and the conversion to midi. Arguments to the commands are child nodes.", child: { name: "KEY", meaning: "Controls the actual key pitch of the music by defining the true note that 'a' translates to. Enter C, C#, D, D#, E, F, F#, G, G#, A, A#, B.", next: { name: "MODE", meaning: "Controls the musical scale that the notes 'a' thru 'b' coorespond to. 1 is Ionian, 2, is Dorian, etc.", next: { name: "CHANNEL", meaning: "Controls the midi channel to which is sent subsequent notes. Channel is 1 thru 16.", next: { name: "PROGRAM", meaning: "Sends out a midi Program Change message. Program is entered as 1 thru 128.", next: { name: "VELOCITY", meaning: "Controls the velocity at which all subsequent notes are received at. Use 0 - 255.", } } } } }, } } } } } };